---
name: CI Tests

on:
  pull_request:
    branches:
     - main

jobs:
  molecule:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        distros:
          - geerlingguy/docker-centos7-ansible:latest
          - geerlingguy/docker-centos8-ansible:latest
          - geerlingguy/docker-amazonlinux2-ansible:latest
          - ghcr.io/artis3n/docker-ubuntu2010-ansible:latest
          - geerlingguy/docker-ubuntu2004-ansible:latest
          - geerlingguy/docker-ubuntu1804-ansible:latest
          - geerlingguy/docker-ubuntu1604-ansible:latest
          - geerlingguy/docker-debian10-ansible:latest
          - geerlingguy/docker-debian9-ansible:latest
          - geerlingguy/docker-fedora31-ansible:latest
          - ghcr.io/artis3n/docker-arch-ansible:latest
      fail-fast: false

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv

      - name: Use Cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pipenv
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-

      - name: Install packages
        run: pipenv install --dev

      - name: Lint
        run: make lint

      - name: Move project to Ansible-required location
        run: |
          mkdir -p ~/.ansible/roles/artis3n.tailscale
          cp -r ./ ~/.ansible/roles/artis3n.tailscale

      - name: Molecule
        run: echo "${{ secrets.VAULT_PASS }}" > /home/runner/work/_temp/.vault-ci-pass && ANSIBLE_VAULT_PASSWORD_FILE=/home/runner/work/_temp/.vault-ci-pass pipenv run molecule test
        env:
          MOLECULE_DISTRO: "${{ matrix.distros }}"

      - name: Clean up
        if: always()
        run: rm /home/runner/work/_temp/.vault-ci-pass

  molecule-windows:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up WSL
        uses: Vampire/setup-wsl@v1
        with:
          distribution: Ubuntu-20.04
          additional-packages:
            python3
            python3-pip

      - name: Install dependencies
        shell: wsl-bash {0}
        run: |
          python3 -m pip install --upgrade pip
          pip3 install setuptools wheel pipenv

      - name: Use Cache
        uses: actions/cache@v2
        with:
          path: '%LOCALAPPDATA%\pipenv\pipenv\Cache'
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-

      - name: Install packages
        shell: wsl-bash {0}
        run: pipenv install --dev

      - name: Move project to Ansible-required location
        shell: wsl-bash {0}
        run: |
          mkdir -p ~/.ansible/roles/artis3n.tailscale
          cp -r ./ ~/.ansible/roles/artis3n.tailscale

      - name: Configure WinRM
        run: |
          $url = "https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1"
          $file = "$env:temp\ConfigureRemotingForAnsible.ps1"

          (New-Object -TypeName System.Net.WebClient).DownloadFile($url, $file)

          powershell.exe -ExecutionPolicy ByPass -File $file

      - name: Test
        shell: wsl-bash {0}
        run: |
          pipenv --where
          pwd
          ip a

      - name: WinRM Test
        run: |
          winrm enumerate winrm/config/Listener
